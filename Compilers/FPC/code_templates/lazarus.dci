[tiol | tiOPF - a new TtiObjectList descendant]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
$Paste()List = class(TtiObjectList)
private
protected
  function    GetItems(i: integer): $Paste(); reintroduce;
  procedure   SetItems(i: integer; const Value: $Paste()); reintroduce;
public
  property    Items[i:integer]: $Paste() read GetItems write SetItems;
  function    Add(const AObject: $Paste()): integer; reintroduce;
published
end;
[tio | tiOPF - a new TtiObject descendant]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
$Paste() = class(TtiObject)
private
protected
  function    GetOwner: $Paste()List; reintroduce;
  procedure   SetOwner(const Value: $Paste()List); reintroduce;
public
  property    Owner: $Paste()List read GetOwner write SetOwner;
published
end;
[igi | tiOPF - Inherited GetItem ]
result := TMyClass(inherited GetItems(i));
[isi | tiOPF - Inherited SetItems ]
inherited SetItems(i, Value);
[igo | tiOPF - Inherited GetOwner ]
result := TMyClass(inherited GetOwner);
[iso | tiOPF - Inherited SetOwner ]
inherited SetOwner(Value);
[ia | tiOPF - Inherited Add ]
result := inherited Add(AObject);
[vr | tiOPF - Visitor Read ]
TVisXXX_Read = class(TtiVisitorSelect)
protected
  function    AcceptVisitor: boolean; override;
  procedure   Init; override;
  procedure   SetupParams; override;
  procedure   MapRowToObject; override;
end;

[vc | tiOPF - Visitor Create ]
TVisXXX_Create = class(TtiVisitorUpdate)
protected
  function    AcceptVisitor: boolean; override;
  procedure   Init; override;
  procedure   SetupParams; override;
end;

[vu | tiOPF - Visitor Update ]
TVisXXX_Update = class(TtiVisitorUpdate)
protected
  function    AcceptVisitor: boolean; override;
  procedure   Init; override;
  procedure   SetupParams; override;
end;

[vd | tiOPF - Visitor Delete ]
TVisXXX_Delete = class(TtiVisitorUpdate)
protected
  function    AcceptVisitor: boolean; override;
  procedure   Init; override;
  procedure   SetupParams; override;
end;

[rv | tiOPF - Register Visitor]
gTIOPFManager.VisitorManager.RegisterVisitor('SaveXXX', TVisXXX_Create);
[ev | tiOPF - Execute Visitor ]
gTIOPFManager.VisitorManager.Execute('SaveLoadXXX|', self);
[ve | tiOPF - Visitor Execute]
gTIOPFManager.VisitorManager.Execute('SaveLoadXXX|', self);
[chke | CheckEquals (DUnit) ]
CheckEquals(|, 1, 0.00001, 'Failing at  1');
[opfmgr | tiOPF - gTIOPFManager]
$(AttributesStart)
AutoOnLineBreak=true
RemoveChar=true
$(AttributesEnd)
gTIOPFManager
[gtiopfmanager | tiOPF - gTIOPFManager]
$(AttributesStart)
AutoOnLineBreak=true
RemoveChar=true
$(AttributesEnd)
gTIOPFManager
[formmediator | Add a new form mediator]
if not Assigned(FMediator) then
begin
  FMediator := TFormMediator.Create(self);
  FMediator.AddProperty('|', ed);
  FMediator.AddProperty('', ed);
  FMediator.AddProperty('', ed);
end;
FMediator.Subject := Data;
FMediator.Active := True;
[avlog | tiOPF - AccetpVisitor log() line]
Log([ClassName, Visited.ClassName, Visited.ObjectStateAsString, Result], lsAcceptVisitor);
[tobject | Fix case - TObject]
$(AttributesStart)
AutoOnWordEnd=true
$(AttributesEnd)
TObject
[l | tiOPF Log line]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
Log('>> $ProcedureName()', lsDebug);
[le | tiOPF Log line end]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
Log('<< $ProcedureName()', lsDebug);
