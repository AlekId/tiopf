unit tiLogToFile_TST;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  tiTestFramework, tiLogToFile, SysUtils, Classes, tiLog;
type
  // Test methods for class TtiLogToFile

  TestTtiLogToFile = class(TtiTestCase)
  private
    FLogFileName: string;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLogFileContention;
  end;

procedure RegisterTests;

implementation

uses
   tiDUnitDependencies
  ,Windows
  ,tiConstants
  ;

const
  CTestLogFileName = '..\Data\';

procedure RegisterTests;
begin
  RegisterNonPersistentTest(TestTtiLogToFile);
end;


procedure TestTtiLogToFile.SetUp;
begin
  FmtStr(FLogFileName, '%s\%s', [TempDirectory, 'TestTtiLogToFile.log']);
end;

procedure TestTtiLogToFile.TearDown;
begin
end;

type
  TtiLogToFileClass = class of TtiLogToFile;

  TtiLogToFile_0 = class (TtiLogToFile);
  TtiLogToFile_1 = class (TtiLogToFile);
  TtiLogToFile_2 = class (TtiLogToFile);
  TtiLogToFile_3 = class (TtiLogToFile);
  TtiLogToFile_4 = class (TtiLogToFile);

const
  CLoggers: array[0..4] of TtiLogToFileClass = (
    TtiLogToFile_0,
    TtiLogToFile_1,
    TtiLogToFile_2,
    TtiLogToFile_3,
    TtiLogToFile_4
  );

procedure TestTtiLogToFile.TestLogFileContention;
var
  LLoggers: array of TtiLogToFile;
  i,j: integer;
  LThreadID: string;
  LMessage : string;
  LTimestamp: string;

const
  CIterations = 100000;
  COverwriteOldFolders = true;

begin
  SetLength(LLoggers, Length(CLoggers));
  FmtStr(LThreadID, '%.4d', [GetCurrentThreadID]);

  for i := Low(LLoggers) to High(LLoggers) do
  begin
    LLoggers[i] := CLoggers[i].CreateWithFileName(
      ExtractFilePath(FLogFileName), ExtractFileName(FLogFileName),
      COverwriteOldFolders);
  end;

  try

  for i := 0 to CIterations - 1 do
  begin
    FmtStr(LMessage, 'Message (%.5d)', [i]);
    LTimestamp := FormatDateTime(cIntlDateTimeDisp, Now);

    for j := Low(LLoggers) to High(LLoggers) do
    begin
      LLoggers[j].Log(LTimestamp, LThreadID, LMessage, lsNormal);
    end;

  end;

  finally

    for i := Low(LLoggers) to High(LLoggers) do
      LLoggers[i].Free;

  end;

end;

end.

